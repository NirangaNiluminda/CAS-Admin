// app/layout.tsx
'use client';

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { AdminProvider } from "./context/AdminContext";
import Navbar from "./components/Navbar/Navbar";
import { QuizProvider } from "./context/QuizContext";
import { EssayProvider } from "./context/EssayContext";
import { Toaster } from 'sonner';
import axios from 'axios';
import { useEffect } from "react";

const inter = Inter({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  useEffect(() => {
    // Check and refresh token on app load
    const initializeApp = async () => {
      const token = localStorage.getItem('token');
      console.log('App loading - Token present:', !!token);
      
      // If no token or token might be expired, refresh it
      if (!token) {
        console.log('No token found, attempting refresh...');
        await refreshToken();
      } else {
        // Optional: Check if token is expired and refresh proactively
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          const isExpired = payload.exp * 1000 < Date.now();
          if (isExpired) {
            console.log('Token expired, refreshing...');
            await refreshToken();
          }
        } catch (e) {
          console.log('Token invalid, refreshing...');
          await refreshToken();
        }
      }
    };

    const refreshToken = async () => {
      try {
        const apiUrl = window.location.hostname === 'localhost' 
          ? 'http://localhost:4000' 
          : process.env.NEXT_PUBLIC_DEPLOYMENT_URL;
        
        console.log('Calling refreshAdminToken...');
        const response = await fetch(`${apiUrl}/api/v1/refreshAdminToken`, {
          method: 'GET',
          credentials: 'include',
        });

        console.log('Refresh response status:', response.status);
        
        if (response.ok) {
          const data = await response.json();
          console.log('Token refresh successful');
          localStorage.setItem('token', data.accessToken);
          
          // Set axios default header
          if (data.accessToken) {
            axios.defaults.headers.common['Authorization'] = `Bearer ${data.accessToken}`;
          }
        } else {
          console.error('Refresh failed with status:', response.status);
          // Don't redirect immediately, let components handle it
        }
      } catch (error) {
        console.error('Token refresh failed:', error);
      }
    };

    // Axios interceptor for API calls
    axios.interceptors.response.use(
      (response) => response,
      async (error) => {
        if (error.response?.status === 401 && !error.config._retry) {
          error.config._retry = true;
          console.log('Axios interceptor: Token expired, refreshing...');
          await refreshToken();
          
          // Retry with new token
          const newToken = localStorage.getItem('token');
          if (newToken) {
            error.config.headers['Authorization'] = `Bearer ${newToken}`;
            return axios(error.config);
          }
        }
        return Promise.reject(error);
      }
    );

    initializeApp();
  }, []);

  return (
    <html lang="en">
      <head>
        <title>Teacher Dashboard</title>
        <meta name="description" content="Generated by create next app" />
      </head>
      <body className={inter.className}>
        <AdminProvider>
          <QuizProvider>
            <EssayProvider>
              <Navbar />
              <main className="min-h-screen bg-gray-50">
                {children}
              </main>
              <Toaster position="top-center" richColors />
            </EssayProvider>
          </QuizProvider>
        </AdminProvider>
      </body>
    </html>
  );
}